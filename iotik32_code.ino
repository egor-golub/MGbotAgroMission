#include <Wire.h>
#include <Adafruit_BME280.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#define WIFI_SSID ""
#define WIFI_PASSWORD ""
#define BOT_TOKEN ""
#define CHAT_ID ""
#define PUMP_PIN_1 14
#define PUMP_PIN_2 15
#define BME280_ADDRESS 0x77
#define NTP_SERVER "pool.ntp.org"
#define UTC_OFFSET 10800
#define UPDATE_INTERVAL 60000
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, NTP_SERVER, UTC_OFFSET, UPDATE_INTERVAL);
WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);
Adafruit_BME280 bme;
struct Plant {
  String name;
  float minTemp;
  float maxTemp;
  float minHumidity;
  float maxHumidity;
  int waterPerDay; 
};
struct WateringSchedule {
  int timesPerDay;
  float pumpRate; 
  String wateringTimes[5];
  int durationSec;
};
Plant currentPlant;
WateringSchedule watering;
bool plantConfigured = false;
bool wateringConfigured = false;
bool pumpStatus = false;
String lastWateringTime = ""; 
void setup() {
  Serial.begin(115200);
  pinMode(PUMP_PIN_1, OUTPUT);
  pinMode(PUMP_PIN_2, OUTPUT);
  digitalWrite(PUMP_PIN_1, LOW);
  digitalWrite(PUMP_PIN_2, LOW);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi –ø–æ–¥–∫–ª—é—á–µ–Ω!");
  if (!bme.begin(BME280_ADDRESS)) {
    Serial.println("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ BME280 –ø–æ –∞–¥—Ä–µ—Å—É 0x77!");
    while (1);
  }
  timeClient.begin();
  client.setInsecure();
  bot.sendMessage(CHAT_ID, "üå± –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–∏–≤–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ù–∞–ø–∏—à–∏—Ç–µ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.", "");
}

void loop() {
  timeClient.update();
  int newMessages = bot.getUpdates(bot.last_message_received + 1);
  for (int i = 0; i < newMessages; i++) {
    String text = bot.messages[i].text;
    String chat_id = bot.messages[i].chat_id;

    if (text == "/menu") {
      showMenu(chat_id);
    } 
    else if (text == "/sensor") {
      sendSensorData(chat_id);
    } 
    else if (text == "/settings") {
      showPlantSettings(chat_id);
    } 
    else if (text == "/water" && plantConfigured) {
      showWaterSettings(chat_id);
    } 
    else if (text == "/pump") {
      togglePump(chat_id);
    } 
    else if (text == "/time") {
      sendCurrentTime(chat_id);
    } 
    else if (text.indexOf('\n') != -1 && !plantConfigured) {
      parsePlantSettings(text, chat_id);
    } 
    else if (text.indexOf(' ') != -1 && plantConfigured && !wateringConfigured) {
      parseWaterSettings(text, chat_id);
    }
  }
  static unsigned long lastCheck = 0;
  if (millis() - lastCheck > 5000) {
    lastCheck = millis();
    checkEnvironmentalConditions();
    if (wateringConfigured) {
      checkWateringTime();
    }
  }

  delay(500);
}

void showMenu(String chat_id) {
  String menu = "üìú *–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:*\n\n";
  menu += "üå° `/sensor` - –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤\n";
  menu += "üåø `/settings` - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ\n";
  if (plantConfigured) menu += "üö∞ `/water` - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–∏–≤\n";
  menu += "‚è±Ô∏è `/time` - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö)\n";
  menu += "üîå `/pump` - –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å–æ—Å–æ–º\n";
  menu += "‚ÑπÔ∏è `/menu` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n\n";

  if (plantConfigured) {
    menu += "üìå *–¢–µ–∫—É—â–µ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ:* " + currentPlant.name + "\n";
    menu += "üíß –ù–æ—Ä–º–∞ –≤–æ–¥—ã: " + String(currentPlant.waterPerDay) + " –º–ª/–¥–µ–Ω—å\n";
    if (wateringConfigured) {
      menu += "‚è∞ *–ì—Ä–∞—Ñ–∏–∫ –ø–æ–ª–∏–≤–∞:*\n";
      menu += "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + String(watering.timesPerDay) + " —Ä–∞–∑/–¥–µ–Ω—å\n";
      menu += "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + String(watering.durationSec) + " —Å–µ–∫\n";
      menu += "‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å –Ω–∞—Å–æ—Å–∞: " + String(watering.pumpRate) + " –ª/–º–∏–Ω\n";
    }
  }
  menu += "üöø *–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å–æ—Å–∞:* " + String(pumpStatus ? "–í–ö–õ" : "–í–´–ö–õ") + "\n";

  bot.sendMessage(chat_id, menu, "Markdown");
}

void sendSensorData(String chat_id) {
  float temp = bme.readTemperature();
  float hum = bme.readHumidity();
  float pres = bme.readPressure() / 100.0F;

  String message = "üìä *–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è:*\n\n";
  message += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + String(temp) + " ¬∞C\n";
  message += "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: " + String(hum) + " %\n";
  message += "üåÄ –î–∞–≤–ª–µ–Ω–∏–µ: " + String(pres) + " –≥–ü–∞\n";

  if (plantConfigured) {
    message += "\n‚öñÔ∏è *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n";
    if (temp < currentPlant.minTemp) message += "- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂–µ –Ω–æ—Ä–º—ã!\n";
    else if (temp > currentPlant.maxTemp) message += "- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—à–µ –Ω–æ—Ä–º—ã!\n";
    if (hum < currentPlant.minHumidity) message += "- –í–ª–∞–∂–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è!\n";
    else if (hum > currentPlant.maxHumidity) message += "- –í–ª–∞–∂–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è!\n";
  }

  bot.sendMessage(chat_id, message, "Markdown");
}

void sendCurrentTime(String chat_id) {
  String timeStr = timeClient.getFormattedTime();
  bot.sendMessage(chat_id, "üïí *–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:* " + timeStr, "Markdown");
}

void togglePump(String chat_id) {
  pumpStatus = !pumpStatus;
  digitalWrite(PUMP_PIN_1, pumpStatus ? HIGH : LOW);
  digitalWrite(PUMP_PIN_2, pumpStatus ? LOW : HIGH);
  
  bot.sendMessage(chat_id, "üöø –ù–∞—Å–æ—Å " + String(pumpStatus ? "–í–ö–õ–Æ–ß–ï–ù" : "–í–´–ö–õ–Æ–ß–ï–ù"), "");
  
  if (!pumpStatus) {
    delay(1000);
    digitalWrite(PUMP_PIN_2, LOW);
  }
}

void showPlantSettings(String chat_id) {
  bot.sendMessage(chat_id, "üåø *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è*\n\n"
                          "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                          "<–ù–∞–∑–≤–∞–Ω–∏–µ>\n"
                          "<–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞>\n"
                          "<–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞>\n"
                          "<–ú–∏–Ω. –≤–ª–∞–∂–Ω–æ—Å—Ç—å>\n"
                          "<–ú–∞–∫—Å. –≤–ª–∞–∂–Ω–æ—Å—Ç—å>\n"
                          "<–í–æ–¥–∞ –≤ –¥–µ–Ω—å (–º–ª)>\n\n"
                          "–ü—Ä–∏–º–µ—Ä:\n"
                          "–û—Ä—Ö–∏–¥–µ—è\n"
                          "18\n"
                          "25\n"
                          "40\n"
                          "70\n"
                          "200", "Markdown");
}

void parsePlantSettings(String text, String chat_id) {
  int lineBreak = text.indexOf('\n');
  currentPlant.name = text.substring(0, lineBreak);
  text = text.substring(lineBreak + 1);

  lineBreak = text.indexOf('\n');
  currentPlant.minTemp = text.substring(0, lineBreak).toFloat();
  text = text.substring(lineBreak + 1);

  lineBreak = text.indexOf('\n');
  currentPlant.maxTemp = text.substring(0, lineBreak).toFloat();
  text = text.substring(lineBreak + 1);

  lineBreak = text.indexOf('\n');
  currentPlant.minHumidity = text.substring(0, lineBreak).toFloat();
  text = text.substring(lineBreak + 1);

  lineBreak = text.indexOf('\n');
  currentPlant.maxHumidity = text.substring(0, lineBreak).toFloat();
  text = text.substring(lineBreak + 1);

  currentPlant.waterPerDay = text.toInt();
  plantConfigured = true;

  bot.sendMessage(chat_id, "‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ *" + currentPlant.name + "* —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!\n"
                          "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª–∏–≤ –∫–æ–º–∞–Ω–¥–æ–π `/water`.", "Markdown");
}

void showWaterSettings(String chat_id) {
  bot.sendMessage(chat_id, "üö∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∏–≤–∞*\n\n"
                          "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                          "<–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–∏–≤–æ–≤>\n"
                          "<–ú–æ—â–Ω–æ—Å—Ç—å –Ω–∞—Å–æ—Å–∞ (–ª/–º–∏–Ω)>\n"
                          "<–í—Ä–µ–º—è –ø–æ–ª–∏–≤–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª>\n\n"
                          "–ü—Ä–∏–º–µ—Ä:\n"
                          "2\n"
                          "1.5\n"
                          "08:00 20:00", "Markdown");
}

void parseWaterSettings(String text, String chat_id) {
  int lineBreak = text.indexOf('\n');
  watering.timesPerDay = text.substring(0, lineBreak).toInt();
  text = text.substring(lineBreak + 1);

  lineBreak = text.indexOf('\n');
  watering.pumpRate = text.substring(0, lineBreak).toFloat();
  text = text.substring(lineBreak + 1);
  int spacePos = 0;
  for (int i = 0; i < watering.timesPerDay; i++) {
    spacePos = text.indexOf(' ');
    if (spacePos == -1) spacePos = text.length();
    watering.wateringTimes[i] = text.substring(0, spacePos);
    if (spacePos != text.length()) text = text.substring(spacePos + 1);
  }

  float totalWater = currentPlant.waterPerDay / 1000.0; // –º–ª -> –ª–∏—Ç—Ä—ã
  float waterPerSession = totalWater / watering.timesPerDay;
  watering.durationSec = (waterPerSession / watering.pumpRate) * 60;

  wateringConfigured = true;

  String message = "‚úÖ *–ü–æ–ª–∏–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!*\n\n";
  message += "üí¶ –í–æ–¥—ã –∑–∞ –ø–æ–ª–∏–≤: " + String(waterPerSession, 2) + " –ª\n";
  message += "‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + String(watering.durationSec) + " —Å–µ–∫\n";
  message += "üïí –ì—Ä–∞—Ñ–∏–∫: ";
  for (int i = 0; i < watering.timesPerDay; i++) {
    message += watering.wateringTimes[i] + " ";
  }

  bot.sendMessage(chat_id, message, "Markdown");
}

void checkEnvironmentalConditions() {
  if (!plantConfigured) return;

  float temp = bme.readTemperature();
  float hum = bme.readHumidity();
  String alerts = "";

  if (temp < currentPlant.minTemp - 2) {
    alerts += "‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è! ";
    alerts += String(temp) + "¬∞C –ø—Ä–∏ –Ω–æ—Ä–º–µ " + String(currentPlant.minTemp) + "¬∞C\n";
  } 
  else if (temp > currentPlant.maxTemp + 2) {
    alerts += "‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è! ";
    alerts += String(temp) + "¬∞C –ø—Ä–∏ –Ω–æ—Ä–º–µ " + String(currentPlant.maxTemp) + "¬∞C\n";
  }

  if (hum < currentPlant.minHumidity - 5) {
    alerts += "‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è! ";
    alerts += String(hum) + "% –ø—Ä–∏ –Ω–æ—Ä–º–µ " + String(currentPlant.minHumidity) + "%\n";
  } 
  else if (hum > currentPlant.maxHumidity + 5) {
    alerts += "‚ö†Ô∏è –í–ª–∞–∂–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è! ";
    alerts += String(hum) + "% –ø—Ä–∏ –Ω–æ—Ä–º–µ " + String(currentPlant.maxHumidity) + "%\n";
  }

  if (alerts != "") {
    bot.sendMessage(CHAT_ID, alerts, "");
  }
}

void checkWateringTime() {
  String currentTime = timeClient.getFormattedTime().substring(0, 5);

  if (currentTime.equals(lastWateringTime)) {
    return;
  }

  for (int i = 0; i < watering.timesPerDay; i++) {
    if (currentTime.equals(watering.wateringTimes[i])) {
      lastWateringTime = currentTime; 
      startWatering();
      delay(watering.durationSec * 1000);
      stopWatering();
      break;
    }
  }
}

void startWatering() {
  digitalWrite(PUMP_PIN_1, HIGH);
  pumpStatus = true;
  bot.sendMessage(CHAT_ID, "üí¶ *–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª–∏–≤–∞*", "Markdown");
}

void stopWatering() {
  digitalWrite(PUMP_PIN_1, LOW);
  digitalWrite(PUMP_PIN_2, HIGH);
  pumpStatus = false;
  delay(1000);
  digitalWrite(PUMP_PIN_2, LOW);
  bot.sendMessage(CHAT_ID, "üõë *–ü–æ–ª–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω*", "Markdown");
}
